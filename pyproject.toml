# vscode-python-2020.7.0 automatically loads if this file is present.
# https://github.com/microsoft/vscode-python/blob/master/CHANGELOG.md#enhancements-1
[tool.poetry]
name = "pymdma"
version = "0.0.41"
description = "Multimodal Data Metrics for Auditing real and synthetic data"
authors = ["Fraunhofer AICOS <no-reply@aicos.fraunhofer.pt>"]
maintainers = [
  "Marília Barandas <marilia.barandas@aicos.fraunhofer.pt>",
  "Ivo Façoco <ivo.facoco@aicos.fraunhofer.pt>",
  "Joana Rebelo <joana.rebelo@aicos.fraunhofer.pt>",
  "Pedro Matias <pedro.matias@aicos.fraunhofer.pt>"
]
readme = "README.md"
license = "LGPL-3.0-or-later"
package-mode = true
#homepage = ""
repository = "https://github.com/fraunhoferportugal/pymdma"
packages = [
  { include = "**/*.py", from = "src/pymdma", to = "pymdma" }
]
exclude = ["tests/*", "notebooks/*", "docs/*", "src/**/main.py",
 "src/**/version.py", "src/**/api/*", "__pycache__/*", "src/**/old", "src/**/experiments",
 "src/**/text/*" # exclude text (for now)
]

[tool.poetry.dependencies]
python = ">=3.9, <3.13"
python-dotenv = "^1.0.0"
numpy = "<2.0.0"
loguru = "^0.7.2"
torch = {version = ">=2.0.1"}
piq = "^0.8.0"
pot = "^0.9.3"
gudhi = "^3.9.0"
pydantic = "^2.8.2"
# Image dependencies
umap-learn = {version = "^0.5.5", optional = true}
pydom = {git = "https://github.com/umang-singhal/pydom.git", optional = true}
torchvision = {version = ">=0.15.2, <0.19.0", optional = true}
torchmetrics = {version = ">=1.3.2, <1.4.0",  optional = true}
pycocotools = {version = "2.0.7", optional = true}
opencv-python = {version = "^4.10.0.84", optional = true}
# Time Series dependencies
tsfel = {version = ">0.1.7", optional = true}
wfdb = {version = "^4.1.2", optional = true}
transformers = {version = "^4.39.1", optional = true}
# Text Dependencies
# accelerate = {version = "^0.24.0", optional = true}
# datasets = {version = "^2.14.6", optional = true}
# nltk = {version = "^3.8.1", optional = true}
# sentence-transformers = {version = "^2.2.2", optional = true}
# python-multipart = {version = "0.0.6", optional = true}
# Tabular Dependencies
spacy = {version = "^3.7.4", optional = true}
word2number = {version = "^1.1", optional = true}
pycaret = {version = "^3.3.1", optional = true}
kaleido = {version = "0.2.1", optional = true}
pycanon = {version = "1.0.1.post2", optional = true}


[tool.poetry.extras]
image = ["umap-learn", "pydom", "torchvision", "torchmetrics", "pycocotools", "opencv-python"]
tabular = ["spacy", "word2number", "pycaret", "kaleido", "pycanon", "transformers"]
time_series = ["tsfel", "wfdb"]
# text = ["accelerate", "datasets", "nltk", "sentence-transformers", "transformers", "python-multipart"]
all = [
  "umap-learn", "pydom", "torchvision", "torchmetrics", "pycocotools", "opencv-python",
  "spacy", "word2number", "pycaret", "kaleido", "pycanon", "transformers",
  "tsfel", "wfdb",
  # "accelerate", "datasets", "nltk", "sentence-transformers", "transformers", "python-multipart"
]


[tool.poetry.group.prod.dependencies]
fastapi = "^0.104.1"
python-multipart = "^0.0.6"
uvicorn = "^0.24.0.post1"

[tool.poetry.group.dev]
optional = true
[tool.poetry.group.dev.dependencies]
black = "^23.11.0"
flake8 = "^6.1.0"
isort = "^5.12.0"
mypy = "^1.7.1"
pre-commit = "^3.5.0"
pytest = "^7.4.3"
pytest-cov = "^4.1.0"
commitizen = "^3.17.0"
safety = "^2.3.5"
# cz-bitbucket-jira-conventional = {git = "https://bitbucket.fraunhofer.pt/scm/is2020/mlops-commit-drafter.git", rev = "v1.0.3"}
httpx = "^0.27.0"
twine = "^5.1.1"

[tool.poetry.group.docs]
optional = true
[tool.poetry.group.docs.dependencies]
pydocstyle = "^6.3.0"
# TODO (telmo.baptista): Add support for Sphinx. Sphinx is only supported by Python 3.9+, so we have to manage the minimal version required before creation.
mkdocs = "^1.6.1"
mkdocstrings = {extras = ["python"], version = "^0.26.1"}
mkdocs-gen-files = "^0.5.0"
mkdocs-literate-nav = "^0.6.1"
mkdocs-material = "^9.5.34"
mkdocs-section-index = "^0.3.9"
mkautodoc = "^0.2.0"
mkdocs-include-markdown-plugin = "^6.2.2"

[tool.poetry.group.notebook]
optional = true
[tool.poetry.group.notebook.dependencies]
ipykernel = "^6.27.1"
nbconvert = "^7.11.0"

[tool.poetry.scripts]
pymdma = "pymdma.cli:main"

# [[tool.poetry.source]]
# name = "torch-cu118"
# url = "https://download.pytorch.org/whl/cu118"
# priority = "explicit"


# [[tool.poetry.source]]
# name = "torch-cpu"
# url = "https://download.pytorch.org/whl/cpu"
# priority = "explicit"

[tool.black]
line-length = 120
color = true
target-version = ['py39']
include = '\.pyi?$'
exclude = '''
(
      \.egg
    | \.eggs
    | \.git
    | \.hg
    | \.dvc
    | \.mypy_cache
    | \.pytest_cache
    | \.nox
    | \.tox
    | \.venv
    | \.venv-docs
    | \.venv-dev
    | \.venv-note
    | \.venv-dempy
    | _build
    | build
    | dist
    | setup.py
)
'''

# `isort` configurations
[tool.isort]
# https://github.com/timothycrosley/isort
py_version = 39
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 120
skip_gitignore = true
color_output = true
atomic = true

# `coverage` configurations
[tool.coverage.run]
source = ["src/pymdma"]
branch = true
command_line = '-m pytest'

[tool.coverage.report]
exclude_lines = [
  "pragma: nocover",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "raise AssertionError",
]
show_missing = true
ignore_errors = true
skip_covered = true
#fail_under = 100
#precision = 1
omit = [
  "tests/*",
  ".venv*",
  "version.py",
  "cli.py",
  "*/text/*" # TODO Remove when text metrics are implemented
]

# `pytest` configurations
[tool.pytest.ini_options]
pythonpath = "src"
minversion = "6.0"
addopts = ["-vv", "--doctest-modules"]
doctest_optionflags = "NORMALIZE_WHITESPACE"
testpaths = ["test"]
filterwarnings = ["ignore::DeprecationWarning"]

[tool.mypy]
# https://mypy.readthedocs.io/en/latest/config_file.html
python_version = "3.9"
pretty = true
show_traceback = true
color_output = true
warn_return_any = true
warn_no_return = true
warn_unused_configs = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unreachable = true

[tool.vulture]
paths = ["src/pymdma"]
min_confidence = 65

[tool.pydocstyle]
convention = "numpy"
#ignore = "D205,D415"

[tool.interrogate]
# https://github.com/econchick/interrogate#configuration
ignore-init-method = true
fail-under = 95
color = true
# possible values: 0 (minimal output), 1 (-v), 2 (-vv)
verbose = 0
quiet = false
exclude = ["setup.py", "docs", "build"]

[tool.nbqa.config]
black = "pyproject.toml"
isort = "pyproject.toml"

[tool.nbqa.mutate]
isort = 1
black = 1
pyupgrade = 1

[tool.nbqa.addopts]
pyupgrade = ["--py36-plus"]

[tool.nbqa.files]
isort = "^notebooks/"
black = "^notebooks/"
flake8 = "^notebooks/"
mypy = "^notebooks/"
pydocstyle = "^notebooks/"
pyupgrade = "^notebooks/"

[tool.bandit]
targets = ["src/pymdma"]
# (optional) list included test IDs here, eg '[B101, B406]':
tests = ["B201", "B301"]
# (optional) list skipped test IDs here, eg '[B101, B406]':
skips = ["B101", "B601"]

[tool.bandit.assert_used]
exclude = ["*_test.py", "test_*.py"]

# TODO
# https://github.com/terrencepreilly/darglint/issues/130

[tool.cruft]
skip = [".git"]

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"
# requires = ["poetry-core>=1.0.0"]
# build-backend = "poetry.core.masonry.api"
